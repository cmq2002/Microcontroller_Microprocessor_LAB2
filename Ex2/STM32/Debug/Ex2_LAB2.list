
Ex2_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e2c  08001e2c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e2c  08001e2c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000001c  08001e50  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001e50  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008472  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001620  00000000  00000000  000284b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016291  00000000  00000000  0002ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000933a  00000000  00000000  00040fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ddf  00000000  00000000  0004a30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc0ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  000cc140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001df4 	.word	0x08001df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08001df4 	.word	0x08001df4

0800014c <display7SEG>:
	, 0x78 //7
	, 0x00 //8
	, 0x10 //9
};

void display7SEG (int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	GPIOB->ODR = sevenSegTable[num];
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <display7SEG+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	4413      	add	r3, r2
 800015a:	781a      	ldrb	r2, [r3, #0]
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <display7SEG+0x24>)
 800015e:	60da      	str	r2, [r3, #12]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000004 	.word	0x20000004
 8000170:	40010c00 	.word	0x40010c00

08000174 <display7SEG1>:

void display7SEG1 (int num){
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	2140      	movs	r1, #64	; 0x40
 8000180:	480e      	ldr	r0, [pc, #56]	; (80001bc <display7SEG1+0x48>)
 8000182:	f000 fe0d 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2180      	movs	r1, #128	; 0x80
 800018a:	480c      	ldr	r0, [pc, #48]	; (80001bc <display7SEG1+0x48>)
 800018c:	f000 fe08 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <display7SEG1+0x48>)
 8000198:	f000 fe02 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a2:	4806      	ldr	r0, [pc, #24]	; (80001bc <display7SEG1+0x48>)
 80001a4:	f000 fdfc 	bl	8000da0 <HAL_GPIO_WritePin>
	display7SEG(num);
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f7ff ffcf 	bl	800014c <display7SEG>
	status = led2;
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <display7SEG1+0x4c>)
 80001b0:	2202      	movs	r2, #2
 80001b2:	701a      	strb	r2, [r3, #0]
}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010800 	.word	0x40010800
 80001c0:	20000000 	.word	0x20000000

080001c4 <display7SEG2>:

void display7SEG2 (int num){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	480e      	ldr	r0, [pc, #56]	; (800020c <display7SEG2+0x48>)
 80001d2:	f000 fde5 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2180      	movs	r1, #128	; 0x80
 80001da:	480c      	ldr	r0, [pc, #48]	; (800020c <display7SEG2+0x48>)
 80001dc:	f000 fde0 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e6:	4809      	ldr	r0, [pc, #36]	; (800020c <display7SEG2+0x48>)
 80001e8:	f000 fdda 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f2:	4806      	ldr	r0, [pc, #24]	; (800020c <display7SEG2+0x48>)
 80001f4:	f000 fdd4 	bl	8000da0 <HAL_GPIO_WritePin>
	display7SEG(num);
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f7ff ffa7 	bl	800014c <display7SEG>
	status = led3;
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <display7SEG2+0x4c>)
 8000200:	2203      	movs	r2, #3
 8000202:	701a      	strb	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010800 	.word	0x40010800
 8000210:	20000000 	.word	0x20000000

08000214 <display7SEG3>:

void display7SEG3 (int num){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2140      	movs	r1, #64	; 0x40
 8000220:	480e      	ldr	r0, [pc, #56]	; (800025c <display7SEG3+0x48>)
 8000222:	f000 fdbd 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <display7SEG3+0x48>)
 800022c:	f000 fdb8 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <display7SEG3+0x48>)
 8000238:	f000 fdb2 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000242:	4806      	ldr	r0, [pc, #24]	; (800025c <display7SEG3+0x48>)
 8000244:	f000 fdac 	bl	8000da0 <HAL_GPIO_WritePin>
	display7SEG(num);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <display7SEG>
	status = led0;
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <display7SEG3+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40010800 	.word	0x40010800
 8000260:	20000000 	.word	0x20000000

08000264 <display7SEG4>:

void display7SEG4 (int num){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2140      	movs	r1, #64	; 0x40
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <display7SEG4+0x48>)
 8000272:	f000 fd95 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000276:	2201      	movs	r2, #1
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <display7SEG4+0x48>)
 800027c:	f000 fd90 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <display7SEG4+0x48>)
 8000288:	f000 fd8a 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <display7SEG4+0x48>)
 8000294:	f000 fd84 	bl	8000da0 <HAL_GPIO_WritePin>
	display7SEG(num);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f7ff ff57 	bl	800014c <display7SEG>
	status = led1;
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <display7SEG4+0x4c>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	701a      	strb	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40010800 	.word	0x40010800
 80002b0:	20000000 	.word	0x20000000

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 fa88 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f862 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f8e8 	bl	8000494 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002c4:	f000 f89a 	bl	80003fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80002c8:	4828      	ldr	r0, [pc, #160]	; (800036c <main+0xb8>)
 80002ca:	f001 f9d3 	bl	8001674 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(setCounterLed);
 80002ce:	2032      	movs	r0, #50	; 0x32
 80002d0:	f000 f94a 	bl	8000568 <setTimer1>
  setTimer2(setCounter7SEG);
 80002d4:	2032      	movs	r0, #50	; 0x32
 80002d6:	f000 f95b 	bl	8000590 <setTimer2>
  setTimer3(setCounterDot);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 f96c 	bl	80005b8 <setTimer3>
  while (1)
  {
	 if (timer1_flag == 1){
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <main+0xbc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d106      	bne.n	80002f6 <main+0x42>
		 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80002e8:	2120      	movs	r1, #32
 80002ea:	4822      	ldr	r0, [pc, #136]	; (8000374 <main+0xc0>)
 80002ec:	f000 fd70 	bl	8000dd0 <HAL_GPIO_TogglePin>
		 setTimer1(setCounterLed);
 80002f0:	2032      	movs	r0, #50	; 0x32
 80002f2:	f000 f939 	bl	8000568 <setTimer1>
	 }

	 if (timer2_flag == 1){
 80002f6:	4b20      	ldr	r3, [pc, #128]	; (8000378 <main+0xc4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d12a      	bne.n	8000354 <main+0xa0>
		switch (status){
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <main+0xc8>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b03      	cmp	r3, #3
 8000304:	d822      	bhi.n	800034c <main+0x98>
 8000306:	a201      	add	r2, pc, #4	; (adr r2, 800030c <main+0x58>)
 8000308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030c:	0800031d 	.word	0x0800031d
 8000310:	08000329 	.word	0x08000329
 8000314:	08000335 	.word	0x08000335
 8000318:	08000341 	.word	0x08000341
			case led0:
				display7SEG4(status);
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <main+0xc8>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff9f 	bl	8000264 <display7SEG4>
				break;
 8000326:	e012      	b.n	800034e <main+0x9a>
			case led1:
				display7SEG1(status);
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <main+0xc8>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff21 	bl	8000174 <display7SEG1>
				break;
 8000332:	e00c      	b.n	800034e <main+0x9a>
			case led2:
				display7SEG2(status);
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <main+0xc8>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff43 	bl	80001c4 <display7SEG2>
				break;
 800033e:	e006      	b.n	800034e <main+0x9a>
			case led3:
				display7SEG3(status);
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <main+0xc8>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff65 	bl	8000214 <display7SEG3>
				break;
 800034a:	e000      	b.n	800034e <main+0x9a>
			default:
				break;
 800034c:	bf00      	nop
		}
	    setTimer2(setCounter7SEG);
 800034e:	2032      	movs	r0, #50	; 0x32
 8000350:	f000 f91e 	bl	8000590 <setTimer2>
	 }

	 if (timer3_flag == 1){
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <main+0xcc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d1c1      	bne.n	80002e0 <main+0x2c>
		 HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800035c:	2110      	movs	r1, #16
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <main+0xc0>)
 8000360:	f000 fd36 	bl	8000dd0 <HAL_GPIO_TogglePin>
		 setTimer3(setCounterLed);
 8000364:	2032      	movs	r0, #50	; 0x32
 8000366:	f000 f927 	bl	80005b8 <setTimer3>
	 if (timer1_flag == 1){
 800036a:	e7b9      	b.n	80002e0 <main+0x2c>
 800036c:	20000050 	.word	0x20000050
 8000370:	2000003c 	.word	0x2000003c
 8000374:	40010800 	.word	0x40010800
 8000378:	20000044 	.word	0x20000044
 800037c:	20000000 	.word	0x20000000
 8000380:	2000004c 	.word	0x2000004c

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b090      	sub	sp, #64	; 0x40
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fd26 	bl	8001de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a6:	2302      	movs	r3, #2
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	2310      	movs	r3, #16
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fd22 	bl	8000e04 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003c6:	f000 f8c9 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 ff8e 	bl	8001304 <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ee:	f000 f8b5 	bl	800055c <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3740      	adds	r7, #64	; 0x40
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	463b      	mov	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_TIM2_Init+0x94>)
 800041a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_TIM2_Init+0x94>)
 8000422:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <MX_TIM2_Init+0x94>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_TIM2_Init+0x94>)
 8000430:	2209      	movs	r2, #9
 8000432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_TIM2_Init+0x94>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_TIM2_Init+0x94>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000440:	4813      	ldr	r0, [pc, #76]	; (8000490 <MX_TIM2_Init+0x94>)
 8000442:	f001 f8c7 	bl	80015d4 <HAL_TIM_Base_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800044c:	f000 f886 	bl	800055c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4619      	mov	r1, r3
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_TIM2_Init+0x94>)
 800045e:	f001 fa5d 	bl	800191c <HAL_TIM_ConfigClockSource>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000468:	f000 f878 	bl	800055c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_TIM2_Init+0x94>)
 800047a:	f001 fc25 	bl	8001cc8 <HAL_TIMEx_MasterConfigSynchronization>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000484:	f000 f86a 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000050 	.word	0x20000050

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <MX_GPIO_Init+0xa8>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a23      	ldr	r2, [pc, #140]	; (800053c <MX_GPIO_Init+0xa8>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b21      	ldr	r3, [pc, #132]	; (800053c <MX_GPIO_Init+0xa8>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_GPIO_Init+0xa8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1d      	ldr	r2, [pc, #116]	; (800053c <MX_GPIO_Init+0xa8>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_GPIO_Init+0xa8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2110      	movs	r1, #16
 80004dc:	4818      	ldr	r0, [pc, #96]	; (8000540 <MX_GPIO_Init+0xac>)
 80004de:	f000 fc5f 	bl	8000da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80004e8:	4815      	ldr	r0, [pc, #84]	; (8000540 <MX_GPIO_Init+0xac>)
 80004ea:	f000 fc59 	bl	8000da0 <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 80004ee:	2200      	movs	r2, #0
 80004f0:	217f      	movs	r1, #127	; 0x7f
 80004f2:	4814      	ldr	r0, [pc, #80]	; (8000544 <MX_GPIO_Init+0xb0>)
 80004f4:	f000 fc54 	bl	8000da0 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOT_Pin LED_RED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 80004f8:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80004fc:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	4619      	mov	r1, r3
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <MX_GPIO_Init+0xac>)
 8000512:	f000 facb 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000516:	237f      	movs	r3, #127	; 0x7f
 8000518:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_GPIO_Init+0xb0>)
 800052e:	f000 fabd 	bl	8000aac <HAL_GPIO_Init>

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800
 8000544:	40010c00 	.word	0x40010c00

08000548 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000550:	f000 f846 	bl	80005e0 <timerRun>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	e7fe      	b.n	8000564 <Error_Handler+0x8>
	...

08000568 <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000570:	4a05      	ldr	r2, [pc, #20]	; (8000588 <setTimer1+0x20>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <setTimer1+0x24>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000038 	.word	0x20000038
 800058c:	2000003c 	.word	0x2000003c

08000590 <setTimer2>:

void setTimer2(int duration){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <setTimer2+0x20>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <setTimer2+0x24>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000040 	.word	0x20000040
 80005b4:	20000044 	.word	0x20000044

080005b8 <setTimer3>:

void setTimer3(int duration){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80005c0:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <setTimer3+0x20>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <setTimer3+0x24>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000048 	.word	0x20000048
 80005dc:	2000004c 	.word	0x2000004c

080005e0 <timerRun>:

void timerRun(){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <timerRun+0x6c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dd0b      	ble.n	8000604 <timerRun+0x24>
		timer1_counter--;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <timerRun+0x6c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <timerRun+0x6c>)
 80005f4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <timerRun+0x6c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <timerRun+0x24>
			timer1_flag = 1;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <timerRun+0x70>)
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <timerRun+0x74>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dd0b      	ble.n	8000624 <timerRun+0x44>
		timer2_counter--;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <timerRun+0x74>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b01      	subs	r3, #1
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <timerRun+0x74>)
 8000614:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <timerRun+0x74>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <timerRun+0x44>
			timer2_flag = 1;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <timerRun+0x78>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <timerRun+0x7c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	dd0b      	ble.n	8000644 <timerRun+0x64>
		timer3_counter--;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <timerRun+0x7c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <timerRun+0x7c>)
 8000634:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <timerRun+0x7c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d102      	bne.n	8000644 <timerRun+0x64>
			timer3_flag = 1;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <timerRun+0x80>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000038 	.word	0x20000038
 8000650:	2000003c 	.word	0x2000003c
 8000654:	20000040 	.word	0x20000040
 8000658:	20000044 	.word	0x20000044
 800065c:	20000048 	.word	0x20000048
 8000660:	2000004c 	.word	0x2000004c

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <HAL_MspInit+0x5c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_MspInit+0x5c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x5c>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x5c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_MspInit+0x60>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_MspInit+0x60>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d8:	d113      	bne.n	8000702 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_TIM_Base_MspInit+0x44>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a0b      	ldr	r2, [pc, #44]	; (800070c <HAL_TIM_Base_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_TIM_Base_MspInit+0x44>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	201c      	movs	r0, #28
 80006f8:	f000 f9a1 	bl	8000a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006fc:	201c      	movs	r0, #28
 80006fe:	f000 f9ba 	bl	8000a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f87f 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <TIM2_IRQHandler+0x10>)
 8000766:	f000 ffd1 	bl	800170c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000050 	.word	0x20000050

08000774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a6:	f7ff ffe5 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f001 faf7 	bl	8001d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fd81 	bl	80002b4 <main>
  bx lr
 80007b2:	4770      	bx	lr
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80007bc:	08001e34 	.word	0x08001e34
  ldr r2, =_sbss
 80007c0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80007c4:	2000009c 	.word	0x2000009c

080007c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_2_IRQHandler>
	...

080007cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x28>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x28>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f923 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	200f      	movs	r0, #15
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff ff3c 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f93b 	bl	8000a92 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f903 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000010 	.word	0x20000010
 8000850:	20000018 	.word	0x20000018
 8000854:	20000014 	.word	0x20000014

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x1c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <HAL_IncTick+0x20>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000018 	.word	0x20000018
 8000878:	20000098 	.word	0x20000098

0800087c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_GetTick+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	20000098 	.word	0x20000098

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <__NVIC_EnableIRQ+0x34>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff90 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff2d 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff42 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff90 	bl	8000980 <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5f 	bl	800092c <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff35 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffa2 	bl	80009e4 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b08b      	sub	sp, #44	; 0x2c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e148      	b.n	8000d52 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	f040 8137 	bne.w	8000d4c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4aa3      	ldr	r2, [pc, #652]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d05e      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000ae8:	4aa1      	ldr	r2, [pc, #644]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d875      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000aee:	4aa1      	ldr	r2, [pc, #644]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d058      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000af4:	4a9f      	ldr	r2, [pc, #636]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d86f      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000afa:	4a9f      	ldr	r2, [pc, #636]	; (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d052      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b00:	4a9d      	ldr	r2, [pc, #628]	; (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d869      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b06:	4a9d      	ldr	r2, [pc, #628]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d04c      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b0c:	4a9b      	ldr	r2, [pc, #620]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d863      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b12:	4a9b      	ldr	r2, [pc, #620]	; (8000d80 <HAL_GPIO_Init+0x2d4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d046      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b18:	4a99      	ldr	r2, [pc, #612]	; (8000d80 <HAL_GPIO_Init+0x2d4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d85d      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d82a      	bhi.n	8000b78 <HAL_GPIO_Init+0xcc>
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d859      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b26:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <HAL_GPIO_Init+0x80>)
 8000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2c:	08000ba7 	.word	0x08000ba7
 8000b30:	08000b81 	.word	0x08000b81
 8000b34:	08000b93 	.word	0x08000b93
 8000b38:	08000bd5 	.word	0x08000bd5
 8000b3c:	08000bdb 	.word	0x08000bdb
 8000b40:	08000bdb 	.word	0x08000bdb
 8000b44:	08000bdb 	.word	0x08000bdb
 8000b48:	08000bdb 	.word	0x08000bdb
 8000b4c:	08000bdb 	.word	0x08000bdb
 8000b50:	08000bdb 	.word	0x08000bdb
 8000b54:	08000bdb 	.word	0x08000bdb
 8000b58:	08000bdb 	.word	0x08000bdb
 8000b5c:	08000bdb 	.word	0x08000bdb
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bdb 	.word	0x08000bdb
 8000b68:	08000bdb 	.word	0x08000bdb
 8000b6c:	08000bdb 	.word	0x08000bdb
 8000b70:	08000b89 	.word	0x08000b89
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	4a82      	ldr	r2, [pc, #520]	; (8000d84 <HAL_GPIO_Init+0x2d8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b7e:	e02c      	b.n	8000bda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e029      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e024      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	3308      	adds	r3, #8
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e01f      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	330c      	adds	r3, #12
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e01a      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e013      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	611a      	str	r2, [r3, #16]
          break;
 8000bc6:	e009      	b.n	8000bdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	615a      	str	r2, [r3, #20]
          break;
 8000bd2:	e003      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e000      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          break;
 8000bda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2bff      	cmp	r3, #255	; 0xff
 8000be0:	d801      	bhi.n	8000be6 <HAL_GPIO_Init+0x13a>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	e001      	b.n	8000bea <HAL_GPIO_Init+0x13e>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d802      	bhi.n	8000bf8 <HAL_GPIO_Init+0x14c>
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x152>
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	3b08      	subs	r3, #8
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	210f      	movs	r1, #15
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	6a39      	ldr	r1, [r7, #32]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8090 	beq.w	8000d4c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a55      	ldr	r2, [pc, #340]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c44:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <HAL_GPIO_Init+0x2e0>)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2e4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1e0>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_GPIO_Init+0x2e8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1dc>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x2ec>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1e2>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1e2>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1e2>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	493b      	ldr	r1, [pc, #236]	; (8000d8c <HAL_GPIO_Init+0x2e0>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4937      	ldr	r1, [pc, #220]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4933      	ldr	r1, [pc, #204]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	492d      	ldr	r1, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4929      	ldr	r1, [pc, #164]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4923      	ldr	r1, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	491f      	ldr	r1, [pc, #124]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	4919      	ldr	r1, [pc, #100]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4915      	ldr	r1, [pc, #84]	; (8000d9c <HAL_GPIO_Init+0x2f0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	3301      	adds	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f47f aeaf 	bne.w	8000ac0 <HAL_GPIO_Init+0x14>
  }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	372c      	adds	r7, #44	; 0x2c
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	10320000 	.word	0x10320000
 8000d74:	10310000 	.word	0x10310000
 8000d78:	10220000 	.word	0x10220000
 8000d7c:	10210000 	.word	0x10210000
 8000d80:	10120000 	.word	0x10120000
 8000d84:	10110000 	.word	0x10110000
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4013      	ands	r3, r2
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43d9      	mvns	r1, r3
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	400b      	ands	r3, r1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	611a      	str	r2, [r3, #16]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e26c      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8087 	beq.w	8000f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e24:	4b92      	ldr	r3, [pc, #584]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d00c      	beq.n	8000e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e30:	4b8f      	ldr	r3, [pc, #572]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d112      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5e>
 8000e3c:	4b8c      	ldr	r3, [pc, #560]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d10b      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4a:	4b89      	ldr	r3, [pc, #548]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d06c      	beq.n	8000f30 <HAL_RCC_OscConfig+0x12c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d168      	bne.n	8000f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e246      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6a:	d106      	bne.n	8000e7a <HAL_RCC_OscConfig+0x76>
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7f      	ldr	r2, [pc, #508]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e02e      	b.n	8000ed8 <HAL_RCC_OscConfig+0xd4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x98>
 8000e82:	4b7b      	ldr	r3, [pc, #492]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7a      	ldr	r2, [pc, #488]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b78      	ldr	r3, [pc, #480]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a77      	ldr	r2, [pc, #476]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e01d      	b.n	8000ed8 <HAL_RCC_OscConfig+0xd4>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xbc>
 8000ea6:	4b72      	ldr	r3, [pc, #456]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a71      	ldr	r2, [pc, #452]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a6e      	ldr	r2, [pc, #440]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e00b      	b.n	8000ed8 <HAL_RCC_OscConfig+0xd4>
 8000ec0:	4b6b      	ldr	r3, [pc, #428]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a6a      	ldr	r2, [pc, #424]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b68      	ldr	r3, [pc, #416]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a67      	ldr	r2, [pc, #412]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fccc 	bl	800087c <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fcc8 	bl	800087c <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e1fa      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0xe4>
 8000f06:	e014      	b.n	8000f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fcb8 	bl	800087c <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fcb4 	bl	800087c <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e1e6      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x10c>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d063      	beq.n	8001006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00b      	beq.n	8000f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f4a:	4b49      	ldr	r3, [pc, #292]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d11c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x18c>
 8000f56:	4b46      	ldr	r3, [pc, #280]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d116      	bne.n	8000f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <HAL_RCC_OscConfig+0x176>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d001      	beq.n	8000f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e1ba      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4939      	ldr	r1, [pc, #228]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	e03a      	b.n	8001006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d020      	beq.n	8000fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fc6d 	bl	800087c <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa6:	f7ff fc69 	bl	800087c <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e19b      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f0      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4927      	ldr	r1, [pc, #156]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e015      	b.n	8001006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fc4c 	bl	800087c <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fc48 	bl	800087c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e17a      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d03a      	beq.n	8001088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d019      	beq.n	800104e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_RCC_OscConfig+0x274>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001020:	f7ff fc2c 	bl	800087c <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001028:	f7ff fc28 	bl	800087c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e15a      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 faa6 	bl	8001598 <RCC_Delay>
 800104c:	e01c      	b.n	8001088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_RCC_OscConfig+0x274>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001054:	f7ff fc12 	bl	800087c <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105a:	e00f      	b.n	800107c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff fc0e 	bl	800087c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d908      	bls.n	800107c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e140      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	42420000 	.word	0x42420000
 8001078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107c:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e9      	bne.n	800105c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a6 	beq.w	80011e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	4b97      	ldr	r3, [pc, #604]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10d      	bne.n	80010c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a93      	ldr	r2, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b91      	ldr	r3, [pc, #580]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c2:	4b8e      	ldr	r3, [pc, #568]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ce:	4b8b      	ldr	r3, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a8a      	ldr	r2, [pc, #552]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010da:	f7ff fbcf 	bl	800087c <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e2:	f7ff fbcb 	bl	800087c <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b64      	cmp	r3, #100	; 0x64
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0fd      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f4:	4b81      	ldr	r3, [pc, #516]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x312>
 8001108:	4b7b      	ldr	r3, [pc, #492]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4a7a      	ldr	r2, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6213      	str	r3, [r2, #32]
 8001114:	e02d      	b.n	8001172 <HAL_RCC_OscConfig+0x36e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x334>
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a75      	ldr	r2, [pc, #468]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b73      	ldr	r3, [pc, #460]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a72      	ldr	r2, [pc, #456]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	e01c      	b.n	8001172 <HAL_RCC_OscConfig+0x36e>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x356>
 8001140:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6213      	str	r3, [r2, #32]
 8001158:	e00b      	b.n	8001172 <HAL_RCC_OscConfig+0x36e>
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d015      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fb7f 	bl	800087c <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001180:	e00a      	b.n	8001198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff fb7b 	bl	800087c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	4293      	cmp	r3, r2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0ab      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0ee      	beq.n	8001182 <HAL_RCC_OscConfig+0x37e>
 80011a4:	e014      	b.n	80011d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fb69 	bl	800087c <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb65 	bl	800087c <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e095      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1ee      	bne.n	80011ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d105      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a47      	ldr	r2, [pc, #284]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8081 	beq.w	80012ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d061      	beq.n	80012bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d146      	bne.n	800128e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001200:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <HAL_RCC_OscConfig+0x4fc>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fb39 	bl	800087c <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120e:	f7ff fb35 	bl	800087c <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e067      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001220:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d108      	bne.n	8001248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	492d      	ldr	r1, [pc, #180]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a19      	ldr	r1, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	430b      	orrs	r3, r1
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_RCC_OscConfig+0x4fc>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fb09 	bl	800087c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126e:	f7ff fb05 	bl	800087c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e037      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x46a>
 800128c:	e02f      	b.n	80012ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_RCC_OscConfig+0x4fc>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff faf2 	bl	800087c <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff faee 	bl	800087c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e020      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x498>
 80012ba:	e018      	b.n	80012ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e013      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
 8001300:	42420060 	.word	0x42420060

08001304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0d0      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d910      	bls.n	8001348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4965      	ldr	r1, [pc, #404]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0b8      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800136a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001384:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	494d      	ldr	r1, [pc, #308]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d040      	beq.n	8001424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d115      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e07f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e073      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06b      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f023 0203 	bic.w	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f4:	f7ff fa42 	bl	800087c <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f7ff fa3e 	bl	800087c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e053      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 020c 	and.w	r2, r3, #12
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d1eb      	bne.n	80013fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d210      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 0207 	bic.w	r2, r3, #7
 800143a:	4922      	ldr	r1, [pc, #136]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e032      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4916      	ldr	r1, [pc, #88]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	490e      	ldr	r1, [pc, #56]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001492:	f000 f821 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 8001496:	4602      	mov	r2, r0
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	490a      	ldr	r1, [pc, #40]	; (80014cc <HAL_RCC_ClockConfig+0x1c8>)
 80014a4:	5ccb      	ldrb	r3, [r1, r3]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <HAL_RCC_ClockConfig+0x1cc>)
 80014ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_ClockConfig+0x1d0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f9a0 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08001e1c 	.word	0x08001e1c
 80014d0:	20000010 	.word	0x20000010
 80014d4:	20000014 	.word	0x20000014

080014d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d8:	b490      	push	{r4, r7}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e0:	1d3c      	adds	r4, r7, #4
 80014e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014e8:	f240 2301 	movw	r3, #513	; 0x201
 80014ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b04      	cmp	r3, #4
 8001510:	d002      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x40>
 8001512:	2b08      	cmp	r3, #8
 8001514:	d003      	beq.n	800151e <HAL_RCC_GetSysClockFreq+0x46>
 8001516:	e02d      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800151a:	623b      	str	r3, [r7, #32]
      break;
 800151c:	e02d      	b.n	800157a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800152a:	4413      	add	r3, r2
 800152c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001530:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_GetSysClockFreq+0xb4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	0c5b      	lsrs	r3, r3, #17
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800154a:	4413      	add	r3, r2
 800154c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001550:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001556:	fb02 f203 	mul.w	r2, r2, r3
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e004      	b.n	800156e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	623b      	str	r3, [r7, #32]
      break;
 8001572:	e002      	b.n	800157a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001576:	623b      	str	r3, [r7, #32]
      break;
 8001578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800157a:	6a3b      	ldr	r3, [r7, #32]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bc90      	pop	{r4, r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	08001e0c 	.word	0x08001e0c
 800158c:	40021000 	.word	0x40021000
 8001590:	007a1200 	.word	0x007a1200
 8001594:	003d0900 	.word	0x003d0900

08001598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <RCC_Delay+0x34>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <RCC_Delay+0x38>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0a5b      	lsrs	r3, r3, #9
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015b4:	bf00      	nop
  }
  while (Delay --);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1e5a      	subs	r2, r3, #1
 80015ba:	60fa      	str	r2, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f9      	bne.n	80015b4 <RCC_Delay+0x1c>
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000010 	.word	0x20000010
 80015d0:	10624dd3 	.word	0x10624dd3

080015d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e041      	b.n	800166a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff f864 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f000 fa6a 	bl	8001aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d001      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e035      	b.n	80016f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_TIM_Base_Start_IT+0x90>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d009      	beq.n	80016c2 <HAL_TIM_Base_Start_IT+0x4e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b6:	d004      	beq.n	80016c2 <HAL_TIM_Base_Start_IT+0x4e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_TIM_Base_Start_IT+0x94>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d111      	bne.n	80016e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d010      	beq.n	80016f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e4:	e007      	b.n	80016f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0201 	orr.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40012c00 	.word	0x40012c00
 8001708:	40000400 	.word	0x40000400

0800170c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d122      	bne.n	8001768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b02      	cmp	r3, #2
 800172e:	d11b      	bne.n	8001768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0202 	mvn.w	r2, #2
 8001738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f9b1 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 8001754:	e005      	b.n	8001762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f9a4 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f9b3 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b04      	cmp	r3, #4
 8001774:	d122      	bne.n	80017bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b04      	cmp	r3, #4
 8001782:	d11b      	bne.n	80017bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0204 	mvn.w	r2, #4
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f987 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f97a 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f989 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d122      	bne.n	8001810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d11b      	bne.n	8001810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0208 	mvn.w	r2, #8
 80017e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2204      	movs	r2, #4
 80017e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f95d 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 80017fc:	e005      	b.n	800180a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f950 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f95f 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b10      	cmp	r3, #16
 800181c:	d122      	bne.n	8001864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b10      	cmp	r3, #16
 800182a:	d11b      	bne.n	8001864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0210 	mvn.w	r2, #16
 8001834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2208      	movs	r2, #8
 800183a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f933 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 8001850:	e005      	b.n	800185e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f926 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f935 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10e      	bne.n	8001890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0201 	mvn.w	r2, #1
 8001888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe fe5c 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189a:	2b80      	cmp	r3, #128	; 0x80
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	2b80      	cmp	r3, #128	; 0x80
 80018aa:	d107      	bne.n	80018bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fa67 	bl	8001d8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c6:	2b40      	cmp	r3, #64	; 0x40
 80018c8:	d10e      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b40      	cmp	r3, #64	; 0x40
 80018d6:	d107      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8f9 	bl	8001ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d10e      	bne.n	8001914 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b20      	cmp	r3, #32
 8001902:	d107      	bne.n	8001914 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0220 	mvn.w	r2, #32
 800190c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fa32 	bl	8001d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_TIM_ConfigClockSource+0x18>
 8001930:	2302      	movs	r3, #2
 8001932:	e0b3      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x180>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800195a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196c:	d03e      	beq.n	80019ec <HAL_TIM_ConfigClockSource+0xd0>
 800196e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001972:	f200 8087 	bhi.w	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197a:	f000 8085 	beq.w	8001a88 <HAL_TIM_ConfigClockSource+0x16c>
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001982:	d87f      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 8001984:	2b70      	cmp	r3, #112	; 0x70
 8001986:	d01a      	beq.n	80019be <HAL_TIM_ConfigClockSource+0xa2>
 8001988:	2b70      	cmp	r3, #112	; 0x70
 800198a:	d87b      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 800198c:	2b60      	cmp	r3, #96	; 0x60
 800198e:	d050      	beq.n	8001a32 <HAL_TIM_ConfigClockSource+0x116>
 8001990:	2b60      	cmp	r3, #96	; 0x60
 8001992:	d877      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 8001994:	2b50      	cmp	r3, #80	; 0x50
 8001996:	d03c      	beq.n	8001a12 <HAL_TIM_ConfigClockSource+0xf6>
 8001998:	2b50      	cmp	r3, #80	; 0x50
 800199a:	d873      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 800199c:	2b40      	cmp	r3, #64	; 0x40
 800199e:	d058      	beq.n	8001a52 <HAL_TIM_ConfigClockSource+0x136>
 80019a0:	2b40      	cmp	r3, #64	; 0x40
 80019a2:	d86f      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 80019a4:	2b30      	cmp	r3, #48	; 0x30
 80019a6:	d064      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x156>
 80019a8:	2b30      	cmp	r3, #48	; 0x30
 80019aa:	d86b      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d060      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x156>
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d867      	bhi.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05c      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x156>
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d05a      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019bc:	e062      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f000 f95c 	bl	8001c8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	609a      	str	r2, [r3, #8]
      break;
 80019ea:	e04e      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f000 f945 	bl	8001c8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a0e:	609a      	str	r2, [r3, #8]
      break;
 8001a10:	e03b      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6859      	ldr	r1, [r3, #4]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f000 f8bc 	bl	8001b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2150      	movs	r1, #80	; 0x50
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f913 	bl	8001c56 <TIM_ITRx_SetConfig>
      break;
 8001a30:	e02b      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f000 f8da 	bl	8001bf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2160      	movs	r1, #96	; 0x60
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f903 	bl	8001c56 <TIM_ITRx_SetConfig>
      break;
 8001a50:	e01b      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f000 f89c 	bl	8001b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2140      	movs	r1, #64	; 0x40
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f8f3 	bl	8001c56 <TIM_ITRx_SetConfig>
      break;
 8001a70:	e00b      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f000 f8ea 	bl	8001c56 <TIM_ITRx_SetConfig>
        break;
 8001a82:	e002      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <TIM_Base_SetConfig+0xa8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <TIM_Base_SetConfig+0x28>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d003      	beq.n	8001b14 <TIM_Base_SetConfig+0x28>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <TIM_Base_SetConfig+0xac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d108      	bne.n	8001b26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <TIM_Base_SetConfig+0xa8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_Base_SetConfig+0x52>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0x52>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <TIM_Base_SetConfig+0xac>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <TIM_Base_SetConfig+0xa8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d103      	bne.n	8001b84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	615a      	str	r2, [r3, #20]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40000400 	.word	0x40000400

08001b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	f023 0201 	bic.w	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f023 030a 	bic.w	r3, r3, #10
 8001bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	621a      	str	r2, [r3, #32]
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 0210 	bic.w	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	031b      	lsls	r3, r3, #12
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	621a      	str	r2, [r3, #32]
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f043 0307 	orr.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ca4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	609a      	str	r2, [r3, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e041      	b.n	8001d64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d004      	beq.n	8001d38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10c      	bne.n	8001d52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40000400 	.word	0x40000400

08001d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <__libc_init_array>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	2600      	movs	r6, #0
 8001da0:	4d0c      	ldr	r5, [pc, #48]	; (8001dd4 <__libc_init_array+0x38>)
 8001da2:	4c0d      	ldr	r4, [pc, #52]	; (8001dd8 <__libc_init_array+0x3c>)
 8001da4:	1b64      	subs	r4, r4, r5
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	42a6      	cmp	r6, r4
 8001daa:	d109      	bne.n	8001dc0 <__libc_init_array+0x24>
 8001dac:	f000 f822 	bl	8001df4 <_init>
 8001db0:	2600      	movs	r6, #0
 8001db2:	4d0a      	ldr	r5, [pc, #40]	; (8001ddc <__libc_init_array+0x40>)
 8001db4:	4c0a      	ldr	r4, [pc, #40]	; (8001de0 <__libc_init_array+0x44>)
 8001db6:	1b64      	subs	r4, r4, r5
 8001db8:	10a4      	asrs	r4, r4, #2
 8001dba:	42a6      	cmp	r6, r4
 8001dbc:	d105      	bne.n	8001dca <__libc_init_array+0x2e>
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
 8001dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc4:	4798      	blx	r3
 8001dc6:	3601      	adds	r6, #1
 8001dc8:	e7ee      	b.n	8001da8 <__libc_init_array+0xc>
 8001dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dce:	4798      	blx	r3
 8001dd0:	3601      	adds	r6, #1
 8001dd2:	e7f2      	b.n	8001dba <__libc_init_array+0x1e>
 8001dd4:	08001e2c 	.word	0x08001e2c
 8001dd8:	08001e2c 	.word	0x08001e2c
 8001ddc:	08001e2c 	.word	0x08001e2c
 8001de0:	08001e30 	.word	0x08001e30

08001de4 <memset>:
 8001de4:	4603      	mov	r3, r0
 8001de6:	4402      	add	r2, r0
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d100      	bne.n	8001dee <memset+0xa>
 8001dec:	4770      	bx	lr
 8001dee:	f803 1b01 	strb.w	r1, [r3], #1
 8001df2:	e7f9      	b.n	8001de8 <memset+0x4>

08001df4 <_init>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr

08001e00 <_fini>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr
